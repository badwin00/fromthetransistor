The purpose of the UART is to send and receive serial data. In our case, it will receive the data from our handy c++ simulation wrapper we user for Verilator. A good goal for now is to send some data to our UART, have it decode and print the result, then send it back.

The details of how to implement encoding and decoding are surprisingly well documented on Wikipedia:
https://en.wikipedia.org/wiki/Universal_asynchronous_receiver-transmitter#Transmitting_and_receiving_serial_data 

Here's a better source for more details:
https://www.circuitbasics.com/basics-uart-communication/

An intimidating example: 
https://www.asic-world.com/examples/verilog/uart.html

But the general idea is that the UART receives a low start bit, and then the data bits, and finally a parity bit followed by two high end bit. We'll keep the data bits limited to 8.
While idling the UART stays high-voltage.

I'm getting close to finishing the UART, and one of my biggest mistakes so far was writing the receiver first. I wanted to test whether or not my decoding worked first because that looked like the hardest part, but trying to interact with the receiver directly through the verilator c++ causes issues when mixing with the internal clock UARTs must have. UARTs expect to receive data through a specific baud rate, and figuring out how to emulate that is a waste of time. Lesson learned: UARTs should only ever receive from other UARTs.

I'm struggling to find a way to implement simulating multiple different clocks with Verilator. In my case i just want two UARTS to have separate internal clocks so i can test my implementation, but later on i could add more devices to my system that have their own clock rates that need to be addressed. Possible solution: https://zipcpu.com/blog/2018/09/06/tbclock.html
